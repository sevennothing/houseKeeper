
// 阅读指导

// @authors     astaxie
// @authors     astaxie
//资源的访问设计: RESTful

1. 返回的媒体类型编码: Json / xml

  application/json

不支持的资源表示，错误报告

以下展示了一个请求XML表示资源的HTTP交互，若服务器不支持这种表示，它将返回一个HTTP 406响应，表示拒绝处理该请求。

REQUEST:
GET /hotel/656bcee2-28d2-404b-891b HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Accept: text/xml


RESPONSE:
HTTP/1.1 406 No match for accept header
Server: xLightweb/2.6
Content-Length: 1468
Content-Type: text/html; charset=iso-8859-1


<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
      <title>Error 406 No match for accept header</title>
   </head>
   <body>
       <h2>HTTP ERROR: 406</h2><pre>No match for accept header</pre>


         ...
   </body>
</html>


2. 附加状态码

RESTful HTTP服务端程序必须根据HTTP规范返回状态码。状态码的第一个数字标识返回类型，1xx表示临时响应，2xx表示成功响应 ，3xx代表转发，4xx表示客户端错误，5xx代表服务端错误。使用错误的响应码，或者总返回200响应，并在消息主体中包含特定应用程序的响应，这两种做法都是不好的实践。

客户代理和中介也要分析返回码。例如，xLightweb HttpClient默认会把持久的HTTP连接保存在连接池中，当一个HTTP交互完成时，持久化HTTP连接就应返回到内部连接池已备重用。而只有完好的连接才能被放回连接池，比如，若返回码是5xx，那该连接就不会重回连接池了。

有时某些特定的客户端要求更简洁的返回码。一种方法是增加一个HTTP头“X-Header”，用它来详细描述HTTP状态码。

REQUEST:
POST /Guest/ HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Content-Length: 94
Content-Type: application/x-www-form-urlencoded


zip=30314&lastName=Gump&street=42+Plantation+Street&firstName=Forest&country=US&
city=Baytown&state=LA



RESPONSE:
HTTP/1.1 400 Bad Request
Server: xLightweb/2.6
Content-Length: 55
Content-Type: text/plain; charset=utf-8
X-Enhanced-Status: BAD_ADDR_ZIP


AddressException: bad zip code 99566

如上面例子中的 X-Enhanced-Status

通常只有在进行编程问题诊断时才需要详细的错误码。尽管比起详细的错误码，HTTP状态码的描述性总是要差很多，但是在大多数情况下，它们对于客户端正确处理问题已经足够了。另一种方法是在响应主体中包含详细的错误码。



3. PUT还是POST？

较之流行的RPC方式，HTTP方法不仅仅在方法名上有所不同，而且HTTP方法中的某些属性（如幂等性，安全性等）也扮演着重要的角色。不同的HTTP方法的幂等性和安全性属性也是不同的。

3.1 使用PUT方法

HttpClient httpClient = new HttpClient();

String[] params = new String[] { "firstName=Forest",
			    "lastName=Gump",
			    "street=42 Plantation Street",
			    "zip=30314",
			    "city=Baytown",
			    "state=LA",
			    "country=US"};
IHttpRequest request = new PutRequest(gumpURI, params);
IHttpResponse response = httpClient.call(request);

使用PUT操作来创建一个新的Guest资源。PUT方法将封装好的资源存放在Request-URI之下。该URI是由客户端决定的，当Request-URI指向某现存资源时，该资源将被新资源替换。基于该原因，PUT方法一般用于创建新资源或更新现有资源。然而，通过使用PUT，资源的整个状态都会被改变，若一个请求只需要修改zip域，它不得不包含该资源的其他域，如 firstName，city等。
如：
REQUEST:
PUT Hotel/guest/bc45-9aa3-3f22d HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Content-Length: 94
Content-Type: application/x-www-form-urlencoded


zip=30314&lastName=Gump&street=42+Plantation+Street&firstName=Forest&country=US&
city=Baytown&state=LA



RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Content-Length: 36
Content-Type: text/plain; charset=utf-8
Location: http://localhost/guest/bc45-9aa3-3f22d


The guest resource has been updated. 

PUT方法是幂等的，幂等性意味着对于一个成功执行的请求，不管其执行多少次，其结果都是一致的。也就是说，只要你愿意，你可以用PUT方法对Hotel资源进行任意次更新，其结果都一样。如果两个PUT方法同时发生，那么只有其中之一会赢得最后的胜利并决定资源的最终状态。删除操作也是幂等的，如果一个PUT方法和DELETE方法同时发生，那么资源或者被更新，或者被删除，而不可能停留在某个中间状态。

如果你不确定是PUT还是DELETE被成功执行，并且没有得到状态码409 (Conflict)或者 417 (Expectation Failed)的话，那么就重新执行一遍。而不需要附加的可靠性协议来避免重复请求，因为通常重复的请求不会有任何影响。

上述描述对于POST方法就不适用了，因为POST方法不是幂等的，若要两次执行同一个POST请求那就要注意了。POST方法所缺失的幂等性就解释了为什么当你每次重新发送POST请求时浏览器总是弹出警告。POST方法用于创建资源，而不需要由客户端指定实例id, 下面展示了通过POST方法创建一个Hotel资源的HTTP交互过程。通常，客户端使用只包含基路径和资源类型名的URI来发送POST请求。

REQUEST:
POST /HotelHTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Content-Length: 35
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept: text/plain


classification=Comfort&name=Central


RESPONSE:
HTTP/1.1 201 Created
Server: xLightweb/2.6
Content-Length: 40
Content-Type: text/plain; charset=utf-8
Location: http://localhost/hotel/656bcee2-28d2-404b-891b


the Hotelresource has been created
图14：HTTP POST交互（创建）

POST方法也经常用于更新资源的部分内容，比如，如果我们要通过发送仅包含classification属性的PUT请求去更新Hotel资源的话，这就是违反HTTP的，但是用POST方法则没有问题。POST方法既不是幂等的，也不是安全的。图15展示了一个执行部分更新的POST方法。

REQUEST:
POST /hotel/0ae526f0-9c3d HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Content-Length: 19
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept: text/plain

classification=First+Class



RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Content-Length: 52
Content-Type: text/plain; charset=utf-8


the Hotelresource has been updated (classification)
图15： HTTP POST交互 （更新）

还可以使用PATCH方法来进行部分更新，PATCH方法是对资源进行部分更新的一个特殊方法。一个PATCH请求包含一个补丁文档，它将应用于由Request-URI所指定的资源。然而PATCH的RFC规范还在草稿中。



4. 使用HTTP缓存

为提高扩展性并降低服务端负载， RESTful的HTTP应用程序可以利用WEB基础设施的缓存机制。HTTP已经意识到缓存是WEB基础设施必不可少的一部分，比如，HTTP协议定义了专门的消息头来支持缓存。如果服务端设置了这个头，客户端（如HTTP客户端或Web缓存代理）就能够有效地支持缓存策略。

HttpClient httpClient = new HttpClient();
httpClient.setCacheMaxSizeKB(500000);


IHttpRequest request = new GetRequest(centralHotelURI + "/classification");
request.setHeader("Accept", "text/plain");


IHttpResponse response = httpClient.call(request);
String classification = response.getBlockingBody.readString();


// ... sometime later re-execute the request
response = httpClient.call(request);
classification = response.getBlockingBody.readString();
图16：客户端缓存交互

图16显示了一个重复的GET调用。通过设置最大缓存大小的值>0激活了HttpClient的缓存功能。如果响应消息中包含了刷新头，比如Expires或Cache-Control: max-age，该响应就会被HttpClient缓存。这些头指明了关联的表示可以保鲜的时间为多久。如果在一段时间内发出了相同的请求，那么HttpClient就会使用缓存为这些请求提供服务，而不需要重复进行网络调用。在网络上总共只有一次HTTP交互，如图17所示。诸如WEB代理之类的缓存中介也实现了相同的功能，而且该缓存还可以在不同客户端之间共享。

REQUEST:
GET /hotel/656bcee2-28d2-404b-891b/classification HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Accept: text/plain


RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Cache-Control: public, max-age=60
Content-Length: 26
Content-Type: text/plain; charset=utf-8


comfort
图17：包含过期头的HTTP响应

过期模型在静态资源上很好用，可是，对于动态资源（资源状态经常改变且无法预测）则不尽相同。HTTP通过验证头，如Last-Modified以及ETag来支持动态资源的缓存。与过期模型相比，验证模型没有节省网络调用。但是，当执行带条件的GET方法时它会对昂贵的操作节约网络传输，图 18（2.request）显示了带条件的GET操作，它带有一个额外的Last-Modified头，这个头包含了缓存对象最后修改日期。如果该资源未被更改，服务端将会返回一个304 (Not Modified) 响应。

1. REQUEST:
GET /hotel/656bcee2-28d2-404b-891b/Reservation/1 HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Accept: application/x-www-form-urlencoded


1. RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Content-Length: 252
Content-Type: application/x-www-form-urlencoded
Last-Modified: Mon, 01 Jun 2009 08:56:18 GMT


from=2009-06-01T09%3A49%3A09.718&to=2009-06-05T09%3A49%3A09.718&guestURI=
http%3A%2F%2Flocalhost%2Fguest%2Fbc45-9aa3-3f22d&RoomURI=http%3A%2F%2F
localhost%2Fhotel%2F656bcee2-28d2-404b-891b%2FRoom%2F1


2. REQUEST:
GET /hotel/0ae526f0-9c3d/Reservation/1 HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Accept: application/x-www-form-urlencoded
If-Modified-Since: Mon, 01 Jun 2009 08:56:18 GMT


2. RESPONSE:
HTTP/1.1 304 Not Modified
Server: xLightweb/2.6
Last-Modified: Mon, 01 Jun 2009 08:56:18 GMT
图18：基于验证的缓存


5. 不要在服务端存储应用状态

RESTful HTTP的交互必须是无状态的，这表明每一次请求要包含处理该请求所需的一切信息。客户端负责维护应用状态。RESTful服务端不需要在请求间保留应用状态，服务端负责维护资源状态而不是应用状态。服务端和中介能够理解独立的请求和响应。Web缓存代理拥有一切正确处理请求所需的信息并管理它的缓存。

这种无状态的方法是实现高扩展和高可用应用的基本原则。通常无状态使得每一个客户请求可以由不同的服务器来响应，当流量增加时，新的服务器可以加进来，而如果某个服务器失败，它也可以从集群中移除。若要了解关于负载均衡以及故障恢复方面的更详细信息，请参考这篇文章服务器负载均衡架构 。


6. 对non-CRED操作的支持

开发者经常想了解如何将non-CRUD（Create-Read-Update-Delete）操作映射到资源。显然，Create、Read、Update和Delete等操作能够很容易地映射到资源的方法。然而， RESTful HTTP还不仅限于面向CRUD的应用。



图19: RESTful HTTP资源

就如图19所示的creditScoreCheck而言，它提供了一个non-CRUD操作creditScore(...)，该操作接受一个address，计算出score并返回。这样的操作可以通过CreditScoreResource实现，该资源代表着计算的返回。图20展示了一个GET方法，它传入address，然后提取CreditScoreResource表示，查询参数被用来指定CreditScoreResource。GET方法是安全的，并且可缓存，所提它很适用于CreditScore Check的creditScore(...)方法的非功能性行为。计算的结果可以缓存一段时间，如图20所示，响应包含了一个缓存头，它通知客户端和中介执行响应缓存。

REQUEST:
GET /CreditScore/?zip=30314&lastName=Gump&street=42+Plantation+Street&
	      firstName=Forest&country=US&city=Baytown&state=LA HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Accept: application/x-www-form-urlencoded


RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Content-Length: 31
Content-Type: application/x-www-form-urlencoded
Cache-Control: public, no-transform, max-age=300


scorecard=Excellent&points=92
图20：Non-CRUD HTTP GET交互

上述例子还显示了GET方法的局限性。尽管HTTP规范并没有指定URL的最大长度，但是实际上客户端，中介以及服务端对URL的长度都有限制。基于此，通过GET的查询参数发送一个很大的实体可能会因为中介和服务器对URL长度的限制而失败。

另一解决方法是使用POST方法，如果作了设置，它也是可缓存的。如图21所示，第一个POST请求的结果是创建了一个虚拟资源CreditScoreResource。输入的address数据用text/card这个mime类型进行编码，在服务端计算得到score之后，它发回一个201（created）响应，该响应包含着所创建的CreditScoreResource资源的URI。 示例中还展示了如果进行了设定，POST响应也可以被缓存。通过一个GET请求就能够取到计算结果。GET响应也包含一个缓存控制头，如果客户端紧接着重新执行这两次请求，那么它们都可由缓存进行响应。

1. REQUEST:
POST /CreditScore/ HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6
Content-Length: 198
Content-Type: text/x-vcard
Accept: application/x-www-form-urlencoded


BEGIN:VCARD
VERSION:2.1
N:Gump;Forest;;;;
FN:Forest Gump
ADR;HOME:;;42 Plantation St.;Baytown;LA;30314;US
LABEL;HOME;ENCODING=QUOTED-PRINTABLE:42 Plantation St.=0D=0A30314 Baytown=0D=0ALA US
END:VCARD


1. RESPONSE:
HTTP/1.1 201 Created
Server: xLightweb/2.6
Cache-Control: public, no-transform, max-age=300
Content-Length: 40
Content-Type: text/plain; charset=utf-8
Location: http://localhost/CreditScore/l00000001-l0000005c


the credit score resource has been created



2. REQUEST:
GET /CreditScore/l00000001-l0000005c HTTP/1.1
Host: localhost
User-Agent: xLightweb/2.6


2. RESPONSE:
HTTP/1.1 200 OK
Server: xLightweb/2.6
Content-Length: 31
Content-Type: application/x-www-form-urlencoded
Cache-Control: public, no-transform, max-age=300


scorecard=Excellent&points=92
图21： Non-CRUD HTTP POST交互

还有其他不同的实现方式。比如不返回201响应，而返回301(Moved Permanently)转发响应。该响应缺省是可缓存的。其他避免二次请求的方法是在201响应中增加一个新创建的CreditScoreResource资源的表示。



参考: http://www.infoq.com/cn/articles/designing-restful-http-apps-roth/
